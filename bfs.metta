; BFS Implementation

; graph representation 
(neighbors A (C B))
(neighbors B (D G))
(neighbors G (E))
(neighbors C ())
(neighbors D ())
(neighbors E ())
; get neighbors from graph
(= (get-neighbors $node)
   (match &self (neighbors $node $nbrs) $nbrs)
)
; mark node as visited...gives [()]
(= (mark-visited $node) 
   (add-atom &self (visited $node))
)
; check if node is visited-...gives true if visited, false if not
(= (is-visited $node)
   (unify &self (visited $node) True False))
; operations 
(= (head (cons $x $xs)) $x)
(= (tail (cons $x $xs)) $xs)
(= (append () $ys) $ys)
(= (append (cons $x $xs) $ys) (cons $x (append $xs $ys)))
; get-unvisited 
(= (get-unvisited $list)
   (if (== $list ())
       ()
       (let $n (head $list)
            (if (is-visited $n)
                (get-unvisited (tail $list))
                (cons $n (get-unvisited (tail $list)))))))
;to change tuple ....later used to compute the get-unvisited inside the recursion
(= (tuple-to-cons ()) ())
(= (tuple-to-cons ($x)) (cons $x ()))
(= (tuple-to-cons ($x $y)) (cons $x (cons $y ())))
(= (tuple-to-cons ($x $y $z)) (cons $x (cons $y (cons $z ()))))
; helper function for bfs traversal
(= (bfs-flat $start)
   (collapse (bfs $start)))
(= (bfs $start)
   (bfs-helper (cons $start ()) ()))
;main bfs-recursion
(= (bfs-helper $queue $visitednodes)
   (if (== $queue ())
       $visitednodes
       (let $n (head $queue)
            (if (is-visited $n) 
                (bfs-helper (tail $queue) $visitednodes)
                (let $_ (mark-visited $n) 
                     (let $nbrs (get-neighbors $n) 
                          (let $unvisitednbrs (get-unvisited (tuple-to-cons $nbrs)) 
                                 (let $newqueue (append (tail $queue) $unvisitednbrs) 
                                    (bfs-helper $newqueue (append $visitednodes (cons $n ())))
                                 )
                           )
                     )
                )
            ) 
            
       )
        
   )   
)
;tests

! (bfs A)
;! (list-to-cons (G))
;! (list-to-cons (A B))
;! (list-to-cons ())
;! (get-neighbors A)
;! (mark-visited A)
;! (mark-visited C)
;! (is-visited A)
;! (is-visited B)
;! (head (cons A (cons B ())))  
;! (append (cons A (cons B ())) (cons C ())) 
;! (append () (cons X (cons Y ()))) 
;! (tail (cons A (cons B (cons C ()))))
;! (tail (cons A ()))
;!; (bfs (tail (cons A ())))
;! (get-unvisited  (cons A (cons B (cons C ()))))
;! (get-unvisited ())
;! (const (collapse(C B)))
;! (get-unvisited (C B))
;! (bfs-helper (tail (cons A ())) ())
;! (list-to-cons (C B))
;! (get-unvisited (cons C (cons B ())))
;! (get-unvisited (cons C (cons B ())))
